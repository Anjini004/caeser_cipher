# -*- coding: utf-8 -*-
"""pixel_manipulation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hw4i8KP73a2nPrN44juG5bqmtFCEvKo7
"""

from PIL import Image
import numpy as np

def encrypt_image(image_path, output_path, key):
    # Open the image
    image = Image.open(image_path)
    image_array = np.array(image)

    # Encrypt the image by applying a simple XOR operation with the key
    encrypted_array = (image_array ^ key) % 256  # Ensure values stay within 0-255

    # Convert the encrypted array back to an image
    encrypted_image = Image.fromarray(encrypted_array.astype('uint8'))

    # Convert to RGB mode if necessary
    if encrypted_image.mode == 'RGBA':
        encrypted_image = encrypted_image.convert('RGB')

    # Save the encrypted image
    encrypted_image.save(output_path)
    print(f"Image encrypted and saved as '{output_path}'")

def decrypt_image(encrypted_image_path, output_path, key):
    # Open the encrypted image
    encrypted_image = Image.open(encrypted_image_path)
    encrypted_array = np.array(encrypted_image)

    # Decrypt the image by applying the XOR operation with the same key
    decrypted_array = (encrypted_array ^ key) % 256  # Ensure values stay within 0-255

    # Convert the decrypted array back to an image
    decrypted_image = Image.fromarray(decrypted_array.astype('uint8'))

    # Convert to RGB mode if necessary
    if decrypted_image.mode == 'RGBA':
        decrypted_image = decrypted_image.convert('RGB')

    # Save the decrypted image
    decrypted_image.save(output_path)
    print(f"Image decrypted and saved as '{output_path}'")

# Example usage
key = 42  # Example key for encryption/decryption
encrypt_image('/content/sample.png', '/content/sample_data/encrypted_image.jpg', key)
decrypt_image('/content/sample_data/encrypted_image.jpg', '/content/sample_data/decrypted_image.jpg', key)

